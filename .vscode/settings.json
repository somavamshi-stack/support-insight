{
  // Formatting using Prettier for JavaScript, overrides VSCode default.
  "[javascript][javascriptreact][typescript][typescriptreact][vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit"
    }
  },

  "[properties]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json5]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[nginx]": {
    "editor.defaultFormatter": "ahmadalli.vscode-nginx-conf"
  },
  "[shellscript]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },

  // Linting using ESLint.
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "vue"
  ],
  "eslint.useFlatConfig": false,
  // Set Jest runMode to on-demand as otherwise it will start running all tests the first time.
  // Equivalent to deprecated option "jest.autoRun": "off"
  "jest.runMode": "on-demand",
  // Debugging.
  "debug.javascript.unmapMissingSources": true,
  "files.exclude": {
    "*[!test]**/node_modules": true
  },
  // Ensure enough terminal history is preserved when running tests.
  "terminal.integrated.scrollback": 10000,
  // Configure todo-tree to exclude node_modules, dist, and compiled.
  "todo-tree.filtering.excludeGlobs": [
    "**/node_modules",
    "**/dist",
    "**/compiled"
  ],
  // Match TODO-APP in addition to other TODOs.
  "todo-tree.general.tags": [
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "XXX",
    "[ ]",
    "[x]",
    "TODO-APP"
  ],
  "typescript.preferences.autoImportFileExcludePatterns": [
    // templates reexport many things (see e.g. entry-base.ts), so they clutter import suggestions
    "packages/next/src/build/templates/app-page.ts",
    "packages/next/src/build/templates/app-route.ts",
    "packages/next/src/build/templates/edge-app-route.ts",
    "packages/next/src/build/templates/edge-ssr-app.ts",
    "packages/next/src/build/templates/edge-ssr.ts",
    "packages/next/src/build/templates/middleware.ts",
    "packages/next/src/build/templates/pages-api.ts",
    "packages/next/src/build/templates/pages-edge-api.ts",
    "packages/next/src/build/templates/pages.ts",
    "packages/next/src/server/app-render/entry-base.ts",
    // singleton modules should always use "*.external" instead of "*-instance"
    "packages/next/src/server/app-render/action-async-storage-instance.ts",
    "packages/next/src/server/app-render/after-task-async-storage-instance.ts",
    "packages/next/src/server/app-render/clean-async-snapshot-instance.ts",
    "packages/next/src/server/app-render/work-async-storage-instance.ts",
    "packages/next/src/server/app-render/work-unit-async-storage-instance.ts"
  ],
  // Disable TypeScript surveys.
  "typescript.surveys.enabled": false,
  // Enable file nesting for unit test files.
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "*.ts": "$(capture).test.ts, $(capture).test.tsx, $(capture).stories.tsx",
    "*.tsx": "$(capture).test.ts, $(capture).test.tsx, $(capture).stories.tsx"
  },
  "typescript.tsdk": "node_modules/typescript/lib",
  "gitlens.advanced.blame.customArguments": [
    "--ignore-revs-file",
    "${workspaceRoot}/.git-blame-ignore-revs"
  ],

  "editor.formatOnSave": true,
  "search.exclude": {
    "**/docs": true,
    "**/node_modules": true,
    "**/lib": true
  }
}
